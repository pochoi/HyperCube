% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/projection.R
\name{projectCreate}
\alias{projectCreate}
\alias{projectFun}
\alias{projectSub}
\alias{projectWeight}
\title{Functions for object "\code{projection.hypercube}"}
\usage{
projectCreate(formula, data)

projectSub(proj, component)

projectWeight(proj, component = NULL, weights = NULL)

projectFun(proj, component = NULL)
}
\arguments{
\item{formula}{input formula without response variable. For example, "~ mother:infant -1".}

\item{data}{input data}

\item{proj}{an object of class "\code{projection.hypercube}".}

\item{component}{a vector or a matrix to specify with components in the \code{proj} are used. See examples for how to use.}

\item{weights}{The weights for the weighted sum of projection matrix. The order of the weights should be the same as the order of the component.}
}
\value{
The function \code{projectCreate} creates a object of the "\code{projection.hyercube}", which is a list containing all the projection matrices. Also, the object "\code{projection.hyercube}" contains the following attributes:
\describe{
  \item{variables}{The names of the variables in the formula}
  \item{nlevels}{The numbers of levels of the factor in each variable}
  \item{dims}{The dimension of the projection matrices}
  \item{component}{The names of the projection matrices stored in the objects}
}

The function \code{projectSub} returns a object of "\code{projection.hypercube}", which contains only the projection matrices according to the argument \code{component}.

The function \code{projectWeight} returns a projection matrix which is the weigthed sum of the projection matrices according to \code{component} and \code{weights}.

The function \code{projectFun} returns a function which computes and returns a weighted sum of projection matrices according to \code{component} in the argument of \code{projectFun}. The argument of the returned function is the \code{weight}. See example for how to use.
}
\description{
The standard ANOVA projections as described in equation (5.4) in Beran (2014).
}
\details{
The standard ANOVA projections as described in equation (5.4) in Beran (2014). The set of projections are sysmmetric, idempotent, mutually orthogonal matrix. The linear combinations of the projection matrices are used as the matrix V (equation (1.3) in Beran (2014)) of the hypercube estimators.
Please provide the formula in the form, for example in the data "litter", "~ mother:infant -1". No responese and No intercept. Only the interaction of factors.
}
\section{Functions}{
\itemize{
\item \code{projectSub}: Subset of object "\code{projection.hypercube}"

\item \code{projectWeight}: Weighted sum of matrix in object "\code{projection.hypercube}"

\item \code{projectFun}: Functions of object "\code{projection.hypercube}"
}}
\examples{
proj <- projectCreate( ~ mother:infant -1, data = litter)

## proj contains the projection matrices :
## proj[["mother0:infant0"]], proj[["mother1:infant0"]], ...
## To see all the names of the projection matrices:
attr(proj, "component")

## If only the additive effects are needed,
## i.e. "mother0:infant0", "mother1:infant0" and "mother0:infant1",
component <- cbind(c(0,0), c(1,0), c(0,1))
proj.sub <- projectSub(proj, component)
attr(proj.sub, "component")

## If we want
## P = 1 * proj[["mother0:infant0"]] + 0.5 * proj[["mother1:infant0"]]
component <- cbind(c(0,0), c(1,0), c(0,1))
weights <- c(1, 0.5, 0)
proj.weights <- projectWeight(proj, component, weights)

## Create a function for more weighted projection matrices.
component <- cbind(c(0,0), c(1,0), c(0,1))
proj.fun <- projectFun(proj, component)

## Same as proj.weights in above example
weights <- c(1, 0.5, 0)
proj.fun(weights)

## Use the projection matrices for hypercube estimator
V <- proj.fun(weights)
hcmod <- hypercube(weight ~ mother:infant -1, data = litter, V = V)
summary(hcmod)
}
\references{
Beran, Rudolf. "Hypercube estimators: Penalized least squares, submodel selection, and numerical stability." Computational Statistics & Data Analysis 71 (2014): 654-666.
}

